@page "/"
@using WhyNotLang.Interpreter
@using WhyNotLang.Interpreter.Evaluators.ExpressionValues
@using WhyNotLang.Tokenizer;

@inject IExecutor Executor
@inject IJSRuntime JsRuntime

<textarea id="main_text" @bind="@programCode" readonly="@isRunning" class="form-control" rows="15">
</textarea>
<p>
    <button class="btn btn-primary" @onclick="Toggle">Toggle variable</button>
    <button class="btn btn-primary" @onclick="Execute">Execute</button>
    <button class="btn btn-primary" @onclick="Stop">Stop</button>
</p>

<textarea id="output" @bind="@output" readonly="readonly" class="form-control" rows="10">
</textarea>
Text input: <input id="input" @bind-value="@inputBuffer" @bind-value:event="oninput" readonly="@inputDisabled" @onkeydown="OnInputKeyDown" class="form-control" />

@code {
    bool toggle = false;
    bool isRunning { get; set; } = false;
    bool inputDisabled { get; set; } = true;
    public string output { get; set; } = "";
    string inputBuffer { get; set; } = "";
    string inputValue { get; set; } = "";
    public string programCode { get; set; } =
@"var x:= 0
Writeln(""What is your name? "")
var name:= Readln()
while (x < 50)
begin
Writeln(ToString(x) + "", Hello "" + name)
x := x+1
Delay(100)
end
";

    void OnInputKeyDown(UIKeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            inputValue = inputBuffer;
            output += inputBuffer + "\n";
            inputBuffer = "";
        }
    }

    protected override async Task OnInitAsync()
    {
        Executor.ProgramState.BuiltinFunctionCollection.Add("Writeln",
            async arguments =>
            {
                var str = arguments.Single();
                if (str.Type != ExpressionValueTypes.String)
                {
                    throw new Exception("String expected");
                }

                output += str.Value + Environment.NewLine;
                this.StateHasChanged();
                await JsRuntime.InvokeAsync<string>("WhyNotLang.scrollOutput");
                return ExpressionValue.Empty;
            });

        Executor.ProgramState.BuiltinFunctionCollection.Add("Readln",
           async arguments =>
           {
               await JsRuntime.InvokeAsync<bool>("WhyNotLang.setFocus", "input");
               inputDisabled = false;
               this.StateHasChanged();
               while (inputValue == string.Empty)
               {

                   await Task.Delay(100);
               }

               var value = new ExpressionValue(inputValue, ExpressionValueTypes.String);
               inputValue = "";
               inputBuffer = "";
               inputDisabled = true;

               return value;
           });
    }

    void Stop()
    {
        Executor.Stop();
    }

    void Toggle()
    {
        toggle = !toggle;
        Executor.ProgramState.AssignVariable("toggle", new ExpressionValue(IntToBool(toggle), ExpressionValueTypes.Number));
    }

    async Task Execute()
    {
        output = "";
        Executor.ProgramState.Clear();
        isRunning = true;
        try
        {
            Executor.Initialise(programCode);
            Executor.ProgramState.DeclareVariable("toggle", new ExpressionValue(IntToBool(toggle), ExpressionValueTypes.Number), true);

            await Executor.ExecuteAll();
        }
        catch (WhyNotLangException ex)
        {
            if (ex.LineNumber > 0)
            {
                output += $"[ERROR] Line {ex.LineNumber}: {ex.Message}";
            }
            else
            {
                output += $"[ERROR] {ex.Message}";
            }
        }


        isRunning = false;
    }

    private int IntToBool(bool val)
    {
        return val ? 1 : 0;
    }
}